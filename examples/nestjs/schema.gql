# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Ingredient {
  id(
    """
    Adds a filter to this field such that only the provided value is included in the collection
    """
    eq: ID

    """
    Adds a filter to this field such that the provided value is excluded from the collection
    """
    neq: ID

    """
    Adds a filter to this field such that any value in the array are included in the collection
    """
    in: [ID!]

    """
    Adds a filter to this field such that all values in the array are excluded from the collection
    """
    notIn: [ID!]

    """
    Adds a filter to this field such that the field is null or not (positive case)
    """
    isNull: Boolean

    """
    Marks a filter on this field as optional when filtering parent collections hence this has no effect on the root collection 
    """
    opt: Boolean

    """Adds a sort operation to this field in this collection"""
    sort: Ordering
  ): ID!
  name(
    """
    Adds a filter to this field such that only the provided value is included in the collection
    """
    eq: String

    """
    Adds a filter to this field such that the provided value is excluded from the collection
    """
    neq: String

    """
    Adds a filter to this field such that only values that are like the provided value are included in the collection
    """
    like: String

    """
    Adds a filter to this field such that only values that are not like the provided value are included in the collection
    """
    notLike: String

    """
    Adds a filter to this field such that only values that are case sensitive like the provided value are included in the collection
    """
    ilike: String

    """
    Adds a filter to this field such that only values that are not case sensitive like the provided value are included in the collection
    """
    notILike: String

    """
    Adds a filter to this field such that any value in the array are included in the collection
    """
    in: [String!]

    """
    Adds a filter to this field such that all values in the array are excluded from the collection
    """
    notIn: [String!]

    """
    Adds a filter to this field such that the field is null or not (positive case)
    """
    isNull: Boolean

    """
    Marks a filter on this field as optional when filtering parent collections hence this has no effect on the root collection 
    """
    opt: Boolean

    """Adds a sort operation to this field in this collection"""
    sort: Ordering
  ): String
  kind(eq: IngredientKind, neq: IngredientKind, in: [IngredientKind!], notIn: [IngredientKind!], opt: Boolean): IngredientKind!
}

"""Sort operations defined on fields"""
enum Ordering {
  asc
  desc
}

enum IngredientKind {
  SolidIngredient
  LiquidIngredient
}

type ArrayAggregations {
  """The count of non null values of this field in this collection"""
  count(sort: Ordering): Float

  """The count of distinct non null values of this field in this collection"""
  countd(sort: Ordering): Float
}

type StringAggregations {
  """The count of non null values of this field in this collection"""
  count(sort: Ordering): Float

  """The count of distinct non null values of this field in this collection"""
  countd(sort: Ordering): Float

  """The distinct string values of this field in this collection"""
  distinct(sort: Ordering): [String!]

  """The lexicographically maximal value of this field in this collection"""
  max(sort: Ordering): String

  """The lexicographically minimum value of this field in this collection"""
  min(sort: Ordering): String
}

type SolidIngredient implements Ingredient {
  id(
    """
    Adds a filter to this field such that only the provided value is included in the collection
    """
    eq: ID

    """
    Adds a filter to this field such that the provided value is excluded from the collection
    """
    neq: ID

    """
    Adds a filter to this field such that any value in the array are included in the collection
    """
    in: [ID!]

    """
    Adds a filter to this field such that all values in the array are excluded from the collection
    """
    notIn: [ID!]

    """
    Adds a filter to this field such that the field is null or not (positive case)
    """
    isNull: Boolean

    """
    Marks a filter on this field as optional when filtering parent collections hence this has no effect on the root collection 
    """
    opt: Boolean

    """Adds a sort operation to this field in this collection"""
    sort: Ordering
  ): ID!
  name(
    """
    Adds a filter to this field such that only the provided value is included in the collection
    """
    eq: String

    """
    Adds a filter to this field such that the provided value is excluded from the collection
    """
    neq: String

    """
    Adds a filter to this field such that only values that are like the provided value are included in the collection
    """
    like: String

    """
    Adds a filter to this field such that only values that are not like the provided value are included in the collection
    """
    notLike: String

    """
    Adds a filter to this field such that only values that are case sensitive like the provided value are included in the collection
    """
    ilike: String

    """
    Adds a filter to this field such that only values that are not case sensitive like the provided value are included in the collection
    """
    notILike: String

    """
    Adds a filter to this field such that any value in the array are included in the collection
    """
    in: [String!]

    """
    Adds a filter to this field such that all values in the array are excluded from the collection
    """
    notIn: [String!]

    """
    Adds a filter to this field such that the field is null or not (positive case)
    """
    isNull: Boolean

    """
    Marks a filter on this field as optional when filtering parent collections hence this has no effect on the root collection 
    """
    opt: Boolean

    """Adds a sort operation to this field in this collection"""
    sort: Ordering
  ): String
  kind(eq: IngredientKind, neq: IngredientKind, in: [IngredientKind!], notIn: [IngredientKind!], opt: Boolean): IngredientKind!
  quantity(
    """
    Adds a filter to this field such that only the provided value is included in the collection
    """
    eq: Float

    """
    Adds a filter to this field such that the provided value is excluded from the collection
    """
    neq: Float

    """
    Adds a filter to this field such that only values greater than the provided value are included in the collection
    """
    gt: Float

    """
    Adds a filter to this field such that only values greater than or equal to the provided value are included in the collection
    """
    gteq: Float

    """
    Adds a filter to this field such that only values less than the provided value are included in the collection
    """
    lt: Float

    """
    Adds a filter to this field such that only values less than or equal the provided value are included in the collection
    """
    lteq: Float

    """
    Adds a filter to this field such that any value in the array are included in the collection
    """
    in: [Float!]

    """
    Adds a filter to this field such that all values in the array are excluded from the collection
    """
    notIn: [Float!]

    """
    Adds a filter to this field such that the field is null or not (positive case)
    """
    isNull: Boolean

    """
    Marks a filter on this field as optional when filtering parent collections hence this has no effect on the root collection 
    """
    opt: Boolean

    """Adds a sort operation to this field in this collection"""
    sort: Ordering
  ): Float
}

type LiquidIngredient implements Ingredient {
  id(
    """
    Adds a filter to this field such that only the provided value is included in the collection
    """
    eq: ID

    """
    Adds a filter to this field such that the provided value is excluded from the collection
    """
    neq: ID

    """
    Adds a filter to this field such that any value in the array are included in the collection
    """
    in: [ID!]

    """
    Adds a filter to this field such that all values in the array are excluded from the collection
    """
    notIn: [ID!]

    """
    Adds a filter to this field such that the field is null or not (positive case)
    """
    isNull: Boolean

    """
    Marks a filter on this field as optional when filtering parent collections hence this has no effect on the root collection 
    """
    opt: Boolean

    """Adds a sort operation to this field in this collection"""
    sort: Ordering
  ): ID!
  name(
    """
    Adds a filter to this field such that only the provided value is included in the collection
    """
    eq: String

    """
    Adds a filter to this field such that the provided value is excluded from the collection
    """
    neq: String

    """
    Adds a filter to this field such that only values that are like the provided value are included in the collection
    """
    like: String

    """
    Adds a filter to this field such that only values that are not like the provided value are included in the collection
    """
    notLike: String

    """
    Adds a filter to this field such that only values that are case sensitive like the provided value are included in the collection
    """
    ilike: String

    """
    Adds a filter to this field such that only values that are not case sensitive like the provided value are included in the collection
    """
    notILike: String

    """
    Adds a filter to this field such that any value in the array are included in the collection
    """
    in: [String!]

    """
    Adds a filter to this field such that all values in the array are excluded from the collection
    """
    notIn: [String!]

    """
    Adds a filter to this field such that the field is null or not (positive case)
    """
    isNull: Boolean

    """
    Marks a filter on this field as optional when filtering parent collections hence this has no effect on the root collection 
    """
    opt: Boolean

    """Adds a sort operation to this field in this collection"""
    sort: Ordering
  ): String
  kind(eq: IngredientKind, neq: IngredientKind, in: [IngredientKind!], notIn: [IngredientKind!], opt: Boolean): IngredientKind!
  amount(
    """
    Adds a filter to this field such that only the provided value is included in the collection
    """
    eq: Float

    """
    Adds a filter to this field such that the provided value is excluded from the collection
    """
    neq: Float

    """
    Adds a filter to this field such that only values greater than the provided value are included in the collection
    """
    gt: Float

    """
    Adds a filter to this field such that only values greater than or equal to the provided value are included in the collection
    """
    gteq: Float

    """
    Adds a filter to this field such that only values less than the provided value are included in the collection
    """
    lt: Float

    """
    Adds a filter to this field such that only values less than or equal the provided value are included in the collection
    """
    lteq: Float

    """
    Adds a filter to this field such that any value in the array are included in the collection
    """
    in: [Float!]

    """
    Adds a filter to this field such that all values in the array are excluded from the collection
    """
    notIn: [Float!]

    """
    Adds a filter to this field such that the field is null or not (positive case)
    """
    isNull: Boolean

    """
    Marks a filter on this field as optional when filtering parent collections hence this has no effect on the root collection 
    """
    opt: Boolean

    """Adds a sort operation to this field in this collection"""
    sort: Ordering
  ): Float!
}

"""summary"""
type IngredientsSummary {
  total: ArrayAggregations!
  name(sort: Ordering): StringAggregations!
}

type Ingredients {
  summary: IngredientsSummary!
  details: [Ingredient!]!
}

type Recipe {
  id(
    """
    Adds a filter to this field such that only the provided value is included in the collection
    """
    eq: ID

    """
    Adds a filter to this field such that the provided value is excluded from the collection
    """
    neq: ID

    """
    Adds a filter to this field such that any value in the array are included in the collection
    """
    in: [ID!]

    """
    Adds a filter to this field such that all values in the array are excluded from the collection
    """
    notIn: [ID!]

    """
    Adds a filter to this field such that the field is null or not (positive case)
    """
    isNull: Boolean

    """
    Marks a filter on this field as optional when filtering parent collections hence this has no effect on the root collection 
    """
    opt: Boolean

    """Adds a sort operation to this field in this collection"""
    sort: Ordering
  ): ID!
  title(
    """
    Adds a filter to this field such that only the provided value is included in the collection
    """
    eq: String

    """
    Adds a filter to this field such that the provided value is excluded from the collection
    """
    neq: String

    """
    Adds a filter to this field such that only values that are like the provided value are included in the collection
    """
    like: String

    """
    Adds a filter to this field such that only values that are not like the provided value are included in the collection
    """
    notLike: String

    """
    Adds a filter to this field such that only values that are case sensitive like the provided value are included in the collection
    """
    ilike: String

    """
    Adds a filter to this field such that only values that are not case sensitive like the provided value are included in the collection
    """
    notILike: String

    """
    Adds a filter to this field such that any value in the array are included in the collection
    """
    in: [String!]

    """
    Adds a filter to this field such that all values in the array are excluded from the collection
    """
    notIn: [String!]

    """
    Adds a filter to this field such that the field is null or not (positive case)
    """
    isNull: Boolean

    """
    Marks a filter on this field as optional when filtering parent collections hence this has no effect on the root collection 
    """
    opt: Boolean

    """Adds a sort operation to this field in this collection"""
    sort: Ordering
  ): String!
  description(
    """
    Adds a filter to this field such that only the provided value is included in the collection
    """
    eq: String

    """
    Adds a filter to this field such that the provided value is excluded from the collection
    """
    neq: String

    """
    Adds a filter to this field such that only values that are like the provided value are included in the collection
    """
    like: String

    """
    Adds a filter to this field such that only values that are not like the provided value are included in the collection
    """
    notLike: String

    """
    Adds a filter to this field such that only values that are case sensitive like the provided value are included in the collection
    """
    ilike: String

    """
    Adds a filter to this field such that only values that are not case sensitive like the provided value are included in the collection
    """
    notILike: String

    """
    Adds a filter to this field such that any value in the array are included in the collection
    """
    in: [String!]

    """
    Adds a filter to this field such that all values in the array are excluded from the collection
    """
    notIn: [String!]

    """
    Adds a filter to this field such that the field is null or not (positive case)
    """
    isNull: Boolean

    """
    Marks a filter on this field as optional when filtering parent collections hence this has no effect on the root collection 
    """
    opt: Boolean

    """Adds a sort operation to this field in this collection"""
    sort: Ordering
  ): String
  creationDate(
    """
    Adds a filter to this field such that only the provided value is included in the collection
    """
    eq: DateTimeISO

    """
    Adds a filter to this field such that the provided value is excluded from the collection
    """
    neq: DateTimeISO

    """
    Adds a filter to this field such that only values greater than (strictly afterwards) the provided value are included in the collection
    """
    gt: DateTimeISO

    """
    Adds a filter to this field such that only values greater than or equal (afterwards and including) to the provided value are included in the collection
    """
    gteq: DateTimeISO

    """
    Adds a filter to this field such that only values less than (strictly before) the provided value are included in the collection
    """
    lt: DateTimeISO

    """
    Adds a filter to this field such that only values less than or equal (before and including) to the provided value are included in the collection
    """
    lteq: DateTimeISO

    """
    Adds a filter to this field such that any value in the array are included in the collection
    """
    in: [DateTimeISO!]

    """
    Adds a filter to this field such that all values in the array are excluded from the collection
    """
    notIn: [DateTimeISO!]

    """
    Adds a filter to this field such that the field is null or not (positive case)
    """
    isNull: Boolean

    """
    Marks a filter on this field as optional when filtering parent collections hence this has no effect on the root collection 
    """
    opt: Boolean

    """Adds a sort operation to this field in this collection"""
    sort: Ordering
  ): DateTimeISO!
  difficulty(eq: RecipeDifficulty, neq: RecipeDifficulty, in: [RecipeDifficulty!], notIn: [RecipeDifficulty!]): RecipeDifficulty!
  ingredients(
    """
    Limits the number of rows to the provided value for a collection's details and summary to be based
    """
    limit: Int

    """
    Skips the provided value number of rows for a collection's details and summary to be based on
    """
    offset: Int
  ): Ingredients!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

enum RecipeDifficulty {
  easy
  medium
  hard
}

type NestedIngredientsSummary {
  sum: IngredientsSummary!
  avg: IngredientsSummary!
  count: IngredientsSummary!
  std: IngredientsSummary!
  max: IngredientsSummary!
  min: IngredientsSummary!
}

type RecipesSummaryBase {
  total: ArrayAggregations!
  title: StringAggregations!
  ingredients(
    """
    Limits the number of rows to the provided value for a collection's details and summary to be based
    """
    limit: Int

    """
    Skips the provided value number of rows for a collection's details and summary to be based on
    """
    offset: Int
  ): NestedIngredientsSummary!
}

type RecipesSummaryByDifficulty {
  easy: RecipesSummaryBase!
  medium: RecipesSummaryBase!
  hard: RecipesSummaryBase!
}

"""summary"""
type RecipesSummary {
  total: ArrayAggregations!
  title: StringAggregations!
  ingredients(
    """
    Limits the number of rows to the provided value for a collection's details and summary to be based
    """
    limit: Int

    """
    Skips the provided value number of rows for a collection's details and summary to be based on
    """
    offset: Int
  ): NestedIngredientsSummary!
  difficulty: RecipesSummaryByDifficulty!
}

type Recipes {
  summary: RecipesSummary!
  details: [Recipe!]!
}

"""Date custom scalar type"""
scalar Date

type Query {
  recipe(id: String!): Recipe!
  recipes(limit: Int, offset: Int): Recipes!
  ingredient(id: String!): Ingredient!
  ingredients: Ingredients!
}

type Mutation {
  addRecipe(newRecipeData: NewRecipeInput!): ID!
  removeRecipe(id: String!): Boolean!
  addIngredient(newIngredient: NewIngredientInput!): ID!
}

input NewRecipeInput {
  title: String!
  description: String
}

input NewIngredientInput {
  name: String!
  amount: Int!
  kind: IngredientKind!
}