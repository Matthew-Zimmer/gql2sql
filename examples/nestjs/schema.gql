# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

interface Ingredient {
  id(eq: ID, neq: ID, in: [ID!], notIn: [ID!], isNull: Boolean, isNotNull: Boolean): ID!
  name(eq: String, neq: String, like: String, notLike: String, ilike: String, notiLike: String, in: [String!], notIn: [String!], isNull: Boolean, isNotNull: Boolean): String!
  kind(eq: IngredientKind, neq: IngredientKind, in: [IngredientKind!], notIn: [IngredientKind!], opt: Boolean): IngredientKind!
}

enum IngredientKind {
  SolidIngredient
  LiquidIngredient
}

type ArrayAggregations {
  count: Int!
}

type StringAggregations {
  count: Int!
  distinct: [String!]!
  max: String!
  min: String!
}

type SolidIngredient implements Ingredient {
  id(eq: ID, neq: ID, in: [ID!], notIn: [ID!], isNull: Boolean, isNotNull: Boolean): ID!
  name(eq: String, neq: String, like: String, notLike: String, ilike: String, notiLike: String, in: [String!], notIn: [String!], isNull: Boolean, isNotNull: Boolean): String!
  kind(eq: IngredientKind, neq: IngredientKind, in: [IngredientKind!], notIn: [IngredientKind!], opt: Boolean): IngredientKind!
  quantity(eq: Float, neq: Float, gt: Float, lt: Float, gteq: Float, lteq: Float, in: [Float!], notIn: [Float!], isNull: Boolean, isNotNull: Boolean): Float!
}

type LiquidIngredient implements Ingredient {
  id(eq: ID, neq: ID, in: [ID!], notIn: [ID!], isNull: Boolean, isNotNull: Boolean): ID!
  name(eq: String, neq: String, like: String, notLike: String, ilike: String, notiLike: String, in: [String!], notIn: [String!], isNull: Boolean, isNotNull: Boolean): String!
  kind(eq: IngredientKind, neq: IngredientKind, in: [IngredientKind!], notIn: [IngredientKind!], opt: Boolean): IngredientKind!
  amount(eq: Float, neq: Float, gt: Float, lt: Float, gteq: Float, lteq: Float, in: [Float!], notIn: [Float!], isNull: Boolean, isNotNull: Boolean): Float!
}

"""summary"""
type IngredientsSummary {
  total: ArrayAggregations!
  name: StringAggregations!
}

type Ingredients {
  summary: IngredientsSummary!
  details: [Ingredient!]!
}

type Recipe {
  id(eq: ID, neq: ID, in: [ID!], notIn: [ID!], isNull: Boolean, isNotNull: Boolean): ID!
  title(eq: String, neq: String, like: String, notLike: String, ilike: String, notiLike: String, in: [String!], notIn: [String!], isNull: Boolean, isNotNull: Boolean): String!
  description(eq: String, neq: String, like: String, notLike: String, ilike: String, notiLike: String, in: [String!], notIn: [String!], isNull: Boolean, isNotNull: Boolean): String
  creationDate: Date!
  difficulty(eq: RecipeDifficulty, neq: RecipeDifficulty, in: [RecipeDifficulty!], notIn: [RecipeDifficulty!]): RecipeDifficulty!
  ingredients: Ingredients!
}

enum RecipeDifficulty {
  easy
  medium
  hard
}

type NestedIngredientsSummary {
  sum: IngredientsSummary!
  avg: IngredientsSummary!
  count: IngredientsSummary!
  std: IngredientsSummary!
  max: IngredientsSummary!
  min: IngredientsSummary!
}

"""summary"""
type RecipesSummary {
  total: ArrayAggregations!
  title: StringAggregations!
  ingredients: NestedIngredientsSummary!
}

type Recipes {
  summary: RecipesSummary!
  details: [Recipe!]!
}

"""Date custom scalar type"""
scalar Date

type Query {
  recipe(id: String!): Recipe!
  recipes(skip: Int! = 0, take: Int! = 25): Recipes!
  ingredient(id: String!): Ingredient!
  ingredients: Ingredients!
}

type Mutation {
  addRecipe(newRecipeData: NewRecipeInput!): ID!
  removeRecipe(id: String!): Boolean!
  addIngredient(newIngredient: NewIngredientInput!): ID!
}

input NewRecipeInput {
  title: String!
  description: String
}

input NewIngredientInput {
  name: String!
  amount: Int!
  kind: IngredientKind!
}